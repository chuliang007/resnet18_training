from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
# from torchkeras import summary
from BP_function import *

import torch
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import utils.utils as util
import utils.quantization as q

import numpy as np
import os, time, sys
import copy

torch.manual_seed(7)

## 3x3 Conv
###########################################################

net = nn.Sequential(nn.Conv2d(2, 3, kernel_size=3, stride=1, padding=1, bias=False),
                    nn.Conv2d(3, 3, kernel_size=3, stride=1, padding=1, bias=False))    
# print(list(net.parameters()))

criterion = nn.MSELoss(size_average=False)    # torch.sum((outputs-labels)**2), no 1/2 in the front
optimizer = optim.SGD(net.parameters(), lr = 1)

weight0 = torch.tensor([[[[ 0.0165, -0.1420,  0.0751],
          [ 0.0740, -0.1260, -0.0353],
          [-0.1381,  0.0612, -0.0635]],

         [[ 0.1656,  0.1673,  0.0240],
          [-0.1005, -0.1384, -0.0259],
          [-0.0663,  0.1039, -0.2013]]],


        [[[ 0.2215, -0.1849,  0.1805],
          [-0.0409,  0.1212,  0.0919],
          [ 0.0099,  0.0439,  0.1790]],

         [[ 0.0606,  0.1251, -0.1823],
          [ 0.1678,  0.0811,  0.0597],
          [ 0.0326,  0.1149,  0.2165]]],


        [[[-0.0524, -0.1313, -0.0593],
          [-0.1437,  0.1134, -0.1165],
          [-0.1258,  0.2034,  0.2157]],

         [[ 0.0271, -0.0408, -0.0304],
          [ 0.1117, -0.2201, -0.1926],
          [ 0.1883,  0.2327, -0.0140]]]])
weight1 = torch.tensor([[[[-0.1521,  0.0053, -0.0895],
          [-0.0004,  0.0942,  0.0852],
          [-0.0226,  0.0212,  0.0524]],

         [[-0.1508, -0.0652,  0.0075],
          [-0.1098, -0.0840,  0.0646],
          [ 0.1108,  0.0027, -0.0749]],

         [[ 0.1054, -0.1055, -0.0452],
          [ 0.1816,  0.0354,  0.0136],
          [ 0.0649, -0.0469,  0.1647]]],


        [[[-0.1570, -0.0529, -0.0333],
          [-0.0792, -0.0476,  0.1193],
          [ 0.1056,  0.0107,  0.1677]],

         [[-0.1359, -0.1148,  0.0870],
          [-0.0103, -0.1754, -0.1332],
          [-0.1172,  0.1486,  0.0872]],

         [[ 0.1489, -0.1433, -0.1876],
          [-0.1262,  0.0206, -0.0380],
          [-0.1213,  0.1401, -0.0621]]],


        [[[-0.1113,  0.0889, -0.0519],
          [ 0.1227,  0.0459,  0.0047],
          [ 0.0404, -0.1446, -0.1030]],

         [[-0.0905, -0.1089,  0.0341],
          [ 0.0384, -0.0800,  0.1255],
          [-0.1071,  0.0389, -0.0550]],

         [[-0.1669, -0.1253,  0.0786],
          [ 0.0762, -0.1190, -0.0600],
          [-0.1799,  0.1035,  0.1664]]]])

input = torch.rand(2, 2, 3, 3)
'''
input = torch.tensor([[[[0.6635, 0.1906, 0.7637],
          [0.9149, 0.3977, 0.4180],
          [0.6731, 0.5643, 0.3347]],

         [[0.0358, 0.1494, 0.5271],
          [0.4732, 0.9129, 0.5171],
          [0.3713, 0.0115, 0.0403]]],

        [[[0.7077, 0.9454, 0.4924],
          [0.0531, 0.6775, 0.9072],
          [0.1691, 0.3684, 0.5421]],

         [[0.2149, 0.0364, 0.7189],
          [0.0897, 0.3745, 0.2345],
          [0.8760, 0.5965, 0.7319]]]])

output = torch.tensor([[[[-0.1437, -0.0334, -0.0273],
          [-0.1359, -0.1678, -0.2066],
          [ 0.0304, -0.0225, -0.1641]],

         [[-0.0763, -0.2217, -0.0566],
          [-0.1577, -0.0730, -0.0553],
          [ 0.0747,  0.0247, -0.1102]],

         [[-0.0543, -0.0566, -0.0448],
          [-0.1192, -0.1403, -0.1845],
          [ 0.0346, -0.0404,  0.0335]]],

        [[[-0.0784, -0.0446,  0.0309],
          [-0.1587, -0.2132, -0.0865],
          [-0.0331, -0.2728, -0.2299]],

         [[-0.1111, -0.0534, -0.0627],
          [-0.2420, -0.2053, -0.1038],
          [-0.1049, -0.1612, -0.0613]],

         [[ 0.0476, -0.0186, -0.0468],
          [-0.0943, -0.1140, -0.1462],
          [ 0.0861, -0.0853, -0.1463]]]])   # torch.Size([2, 3, 3, 3])

e_L = torch.tensor([[[[-2.2873, -2.0668, -2.0545],
          [-2.2718, -2.3356, -2.4132],
          [-1.9393, -2.0449, -2.3281]],

         [[-2.1526, -2.4434, -2.1131],
          [-2.3154, -2.1459, -2.1106],
          [-1.8506, -1.9507, -2.2205]],

         [[-2.1085, -2.1132, -2.0896],
          [-2.2384, -2.2807, -2.3689],
          [-1.9308, -2.0808, -1.9330]]],

        [[[-2.1568, -2.0892, -1.9382],
          [-2.3175, -2.4265, -2.1731],
          [-2.0661, -2.5457, -2.4599]],

         [[-2.2222, -2.1068, -2.1254],
          [-2.4840, -2.4106, -2.2076],
          [-2.2098, -2.3224, -2.1226]],

         [[-1.9048, -2.0373, -2.0937],
          [-2.1887, -2.2280, -2.2924],
          [-1.8278, -2.1706, -2.2925]]]]    # torch.Size([2, 3, 3, 3])
'''
output = net(input)
# print('input: ', input, input.size())
# print('output: ', output, output.size())
# print('weight0: ', weight0.size())
# print('weight1: ', weight1.size())

out0 = Conv_fw(weight0, input, stride=1)
out1 = Conv_fw(weight1, out0, stride=1)
print('out0 Conv 3x3', out0.size())
print('out1 Conv 3x3', out1.size())

label = torch.ones_like(output)

loss = criterion(output, label)
e_L = 2 * (output-label)
print('e_L: ', e_L.size())

#'''
# print('\n========== conv bp error ==========')
weight_rot = rot180(weight1)
# print('weight1_rot: ', weight_rot, weight_rot.size())
e_conv0 = Conv_bp(weight_rot, e_L, stride=1)
print('e_conv0: ', e_conv0.size())
#'''

# print('\n========== conv bp gradient ==========')
g_conv0 = Conv_3x3_grad(e_conv0, input, stride=1)
print('g_conv0: ', g_conv0, g_conv0.size())
g_conv1 = Conv_3x3_grad(e_L, out0, stride=1)
print('g_conv1: ', g_conv1, g_conv1.size())

print('\n========== nn.autograd gradient ==========')
loss.backward()
for name, value in net.named_parameters():
  print(name, value.grad, value.grad.size())

"""
========== nn.autograd gradient ==========
0.weight tensor([[[[-2.0722, -2.1840, -1.0248],
          [-1.5042, -0.9319,  0.8359],
          [-0.2162,  0.7333,  1.8645]],

         [[-1.4484, -2.3300, -0.9737],
          [-2.3085, -1.8492,  0.3321],
          [-0.3240,  1.1475,  1.5975]]],


        [[[ 4.4831,  8.0376,  6.8286],
          [ 7.2598, 13.4636, 11.7058],
          [ 5.2306, 10.0215,  9.1137]],

         [[ 1.4220,  3.2586,  4.2663],
          [ 3.7508,  8.0061,  8.3126],
          [ 5.3534,  9.3209,  7.6539]]],


        [[[-0.0461,  0.2561,  0.0850],
          [ 2.9366,  4.4007,  2.4933],
          [ 3.4186,  5.0128,  2.8876]],

         [[-1.0411, -0.4613,  0.1260],
          [ 0.2529,  2.2126,  1.8210],
          [ 3.5630,  4.2440,  2.2462]]]]) torch.Size([3, 2, 3, 3])
1.weight tensor([[[[  4.1388,   5.4672,   3.4622],
          [  4.5189,   6.1247,   3.8357],
          [  2.5081,   3.2774,   2.0710]],

         [[ -8.6351, -11.0890,  -7.1238],
          [-10.3392, -13.8933,  -9.7315],
          [ -5.9450,  -8.5353,  -6.6469]],

         [[ -1.2746,  -2.2436,  -1.1454],
          [  1.9596,   1.7468,   1.1764],
          [  3.3898,   4.1177,   2.6497]]],


        [[[  3.8430,   5.2640,   3.4630],
          [  4.4612,   6.0633,   3.9360],
          [  2.7112,   3.4707,   2.2106]],

         [[ -8.0467, -10.6822,  -7.0725],
          [-10.2241, -13.8245,  -9.8208],
          [ -6.1010,  -8.7547,  -6.7569]],

         [[ -1.1946,  -2.1260,  -1.1488],
          [  1.3954,   1.4757,   1.0058],
          [  3.2785,   4.2192,   2.6935]]],


        [[[  3.9150,   5.1298,   3.2941],
          [  4.5528,   5.8712,   3.5491],
          [  2.5827,   3.2030,   1.8922]],

         [[ -8.1080, -10.4290,  -6.6787],
          [-10.0665, -13.2956,  -9.1451],
          [ -6.0271,  -8.3445,  -6.2797]],

         [[ -1.3847,  -2.1273,  -0.9957],
          [  1.5921,   1.4885,   1.0913],
          [  3.3284,   3.9878,   2.5215]]]]) torch.Size([3, 3, 3, 3])
"""